/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.3 public/models/Animated Woman.glb -o src/components/AnimatedWoman.jsx -r public
*/

import { useAnimations, useGLTF } from "@react-three/drei";
import { useGraph } from "@react-three/fiber";
import { useEffect, useMemo, useRef, useState } from "react";
import * as THREE from "three";
import { GLTF, SkeletonUtils } from "three-stdlib";

type GLTFResult = GLTF & {
  nodes: {
    _rootJoint: THREE.Bone;
    body: THREE.SkinnedMesh;
    eye: THREE.SkinnedMesh;
    "hand-": THREE.SkinnedMesh;
    leg: THREE.SkinnedMesh;
  };
  materials: {
    Material: THREE.Material;
  };
};
export function FrontalFallguy({ ...props }) {
  const group = useRef<THREE.Group>(null);
  const { scene, animations } = useGLTF("/models/Fallguy.glb") as GLTFResult;

  const { actions } = useAnimations(animations, group);
  const [animation, setAnimation] = useState("run");
  const clone = useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { nodes, materials } = useGraph(clone) as GLTFResult;
  useEffect(() => {
    const action = actions[animation];
    if (action) {
      action.reset().fadeIn(0.24).play();
      return () => {
        action.fadeOut(0.24);
      };
    }
  }, [animation, actions]);
  const delayWave = (delay: number) => {
    setTimeout(() => {
      setAnimation("wave");
      setTimeout(() => {
        setAnimation("run");
        delayWave(3000);
      }, 6000);
    }, delay);
  };
  const newMaterial = (materials.Material as THREE.MeshStandardMaterial).clone();

  useEffect(() => {
    delayWave(2000);
  }, []);

  return (
    <group ref={group} {...props} scale={0.4} dispose={null}>
      <group name="Scene">
        <group name="fall_guys">
          <primitive object={nodes._rootJoint} />
          <mesh>
            <skinnedMesh
              name="body"
              geometry={nodes.body.geometry}
              material={newMaterial}
              skeleton={nodes.body.skeleton}
              castShadow
              receiveShadow
            />
            <skinnedMesh
              name="eye"
              geometry={nodes.eye.geometry}
              material={materials.Material}
              skeleton={nodes.eye.skeleton}
              castShadow
              receiveShadow
            />
            <skinnedMesh
              name="hand-"
              geometry={nodes["hand-"].geometry}
              material={newMaterial}
              skeleton={nodes["hand-"].skeleton}
              castShadow
              receiveShadow
            />
            <skinnedMesh
              name="leg"
              geometry={nodes.leg.geometry}
              material={newMaterial}
              skeleton={nodes.leg.skeleton}
              castShadow
              receiveShadow
            />
          </mesh>
        </group>
      </group>
    </group>
  );
}
