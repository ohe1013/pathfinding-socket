/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.3 public/models/Animated Woman.glb -o src/components/AnimatedWoman.jsx -r public
*/

import { useAvatar } from "@/store/avatar";
import { useAnimations, useGLTF } from "@react-three/drei";
import { useEffect, useRef, useState } from "react";
import * as THREE from "three";
export function FrontalAvatar({ ...props }) {
  const avatar = useRef();
  const group = useRef<THREE.Group>(null);
  const { url } = useAvatar();
  const { scene } = useGLTF(url);

  const { animations: walkAnimation } = useGLTF("/animations/M_Walk_001.glb");
  const { animations: waveAnimation } = useGLTF("/animations/M_Standing_Expressions_001.glb");

  const { actions } = useAnimations([waveAnimation[0], walkAnimation[0]], avatar);
  const [animation, setAnimation] = useState("M_Standing_Idle_001");
  const [init, setInit] = useState(url);

  useEffect(() => {
    const action = actions[animation];
    if (action) {
      action
        .reset()
        .fadeIn(init === url ? 0.32 : 0)
        .play();
      setInit(url);
      return () => {
        action?.fadeOut(0.32);
      };
    }
  }, [animation, actions, url, init]);

  const delayWave = (delay: number) => {
    setTimeout(() => {
      setAnimation("M_Standing_Expressions_001");
      setTimeout(() => {
        setAnimation("M_Walk_001");
        delayWave(3000);
      }, 6000);
    }, delay);
  };

  useEffect(() => {
    delayWave(12);
  }, []);

  return (
    <group ref={group} {...props} dispose={null}>
      <primitive object={scene} ref={avatar} />
    </group>
  );
}
