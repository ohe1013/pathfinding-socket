import { useRef, useState } from "react";
import { motion } from "framer-motion";
import { socket } from "../SocketManager";
import useMapStore from "@/store/map";
import useInfo from "@/store/info";
import { toast, ToastContainer } from "react-toastify";
import ConfirmModal from "../components/Confirm";
import useModalStore from "@/store/modal";
import { AvatarCreator } from "@readyplayerme/react-avatar-creator";
import { useAvatar } from "@/store/avatar";
import { LobbyUI } from "./LobbyUI";
import { GalleryUI } from "./GalleryUI";
import { GuestBookUI } from "./GuestBookUI";
import { RoomUI } from "./RoomUI";

export const UI = () => {
  const map = useMapStore((map) => map.state);
  const info = useInfo((info) => info.state);
  const setInfo = useInfo((info) => info.setState);
  const [name, setName] = useState<string>(localStorage.getItem("name") || "");
  const [useName, setUseName] = useState(false);
  const openModal = useModalStore((state) => state.openModal);
  const { url, setUrl } = useAvatar();
  const [avatarMode, setAvatarMode] = useState(false);
  const switchMusic = () => {
    if (info.useMusic) {
      setInfo({ ...info, useMusic: false });
    } else {
      setInfo({ ...info, useMusic: true });
    }
  };

  const motionRef = useRef(null);

  const fixName = () => {
    if (name === "") {
      toast.warn("이름이 없어요.😂");
      return;
    }
    setUseName(true);
    localStorage.setItem("name", name);
    socket.emit("name", name);
  };
  const changeName = () => {
    setUseName(false);
  };

  return (
    <>
      <motion.div
        ref={motionRef}
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ duration: 0.5, delay: 0.5 }}
      >
        {avatarMode && (
          <AvatarCreator
            subdomain="wawa-sensei-tutorial"
            className="fixed top-0 left-0 z-[999999999] w-full h-full" // have to put a crazy z-index to be on top of HTML generated by Drei
            onAvatarExported={(event) => {
              let newAvatarUrl =
                event.data.url === url.split("?")[0]
                  ? event.data.url.split("?")[0] + "?" + new Date().getTime()
                  : event.data.url;
              newAvatarUrl += (newAvatarUrl.includes("?") ? "&" : "?") + "meshlod=1&quality=medium";
              setUrl(newAvatarUrl);
              localStorage.setItem("avatarUrl", newAvatarUrl);

              setAvatarMode(false);
            }}
            config={{ language: "kr" }}
          />
        )}
        {map?.roomId && (
          <div className="fixed inset-4 flex items-center justify-end flex-col pointer-events-none select-none">
            {info.situation === "gallery" && <GalleryUI name={name} openModal={openModal} />}
            {info.situation === "guestbook" && <GuestBookUI switchMusic={switchMusic} />}
            {info.situation === "lobby" && (
              <LobbyUI
                fixName={fixName}
                name={name}
                setName={setName}
                unFixName={changeName}
                useName={useName}
              />
            )}
            {info.situation === "room" && <RoomUI setAvatarMode={setAvatarMode} />}
          </div>
        )}

        <ToastContainer />
        <ConfirmModal />
      </motion.div>
    </>
  );
};
